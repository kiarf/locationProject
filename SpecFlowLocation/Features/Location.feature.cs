// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowLocation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Location", SourceFile="Features\\Location.feature", SourceLine=0)]
    public partial class LocationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Location.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Location", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "BirthDate",
                        "LicenceDate",
                        "LicenceNumber",
                        "Login",
                        "Password"});
            table1.AddRow(new string[] {
                        "Francois",
                        "Roullaud",
                        "16/10/1999",
                        "04/09/2019",
                        "20AF45091",
                        "froullaud",
                        "YXplcnR5"});
            table1.AddRow(new string[] {
                        "Johan",
                        "Campion",
                        "13/07/1997",
                        "02/11/2017",
                        "19BF25467",
                        "jcampion",
                        "YXplcnR5"});
            table1.AddRow(new string[] {
                        "Jean-Michel",
                        "Osef",
                        "14/02/1954",
                        "02/09/1972",
                        "21CF16547",
                        "jmosef",
                        "YXplcnR5"});
#line 4
testRunner.Given("the clients are", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Immatriculation",
                        "Model",
                        "Brand",
                        "Color",
                        "ReservationPrice",
                        "PricePerKilometer",
                        "HorsePower"});
            table2.AddRow(new string[] {
                        "24 EFR 14",
                        "Clio 2",
                        "Renault",
                        "Blue",
                        "25",
                        "0.5",
                        "2"});
            table2.AddRow(new string[] {
                        "01 BML 98",
                        "Batmobile",
                        "Ford",
                        "Black",
                        "150",
                        "2",
                        "9"});
            table2.AddRow(new string[] {
                        "98 PZL 21",
                        "SS 180",
                        "Vesoa",
                        "Red",
                        "500",
                        "15",
                        "14"});
#line 9
 testRunner.And("the vehicles are", ((string)(null)), table2, "And ");
#line hidden
#line 14
 testRunner.And("froullaud is logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get available vehicles", SourceLine=16)]
        public virtual void GetAvailableVehicles()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get available vehicles", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Immatriculation",
                            "Login",
                            "StartDate",
                            "EndDate",
                            "EstimatedKilometers"});
                table3.AddRow(new string[] {
                            "24 EFR 14",
                            "jcampion",
                            "11/03/2022",
                            "12/06/2022",
                            "25"});
                table3.AddRow(new string[] {
                            "01 BML 98",
                            "jcampion",
                            "11/03/2021",
                            "12/03/2021",
                            "100"});
#line 18
 testRunner.Given("the reservations are", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Immatriculation",
                            "Model",
                            "Brand",
                            "Color",
                            "ReservationPrice",
                            "PricePerKilometer",
                            "HorsePower"});
                table4.AddRow(new string[] {
                            "01 BML 98",
                            "Batmobile",
                            "Ford",
                            "Black",
                            "150",
                            "2",
                            "9"});
#line 22
 testRunner.Then("the available vehicles should be", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Make reservation", SourceLine=25)]
        public virtual void MakeReservation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make reservation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Immatriculation",
                            "Login",
                            "StartDate",
                            "EndDate",
                            "EstimatedKilometers"});
                table5.AddRow(new string[] {
                            "01 BML 98",
                            "froullaud",
                            "13/03/2022",
                            "15/03/2022",
                            "100"});
#line 27
 testRunner.When("loan vehicle", ((string)(null)), table5, "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Immatriculation",
                            "Login",
                            "StartDate",
                            "EndDate",
                            "EstimatedKilometers",
                            "FinalKilometers",
                            "EstimatedPrice",
                            "FinalPrice"});
                table6.AddRow(new string[] {
                            "01 BML 98",
                            "froullaud",
                            "13/03/2022",
                            "15/03/2022",
                            "100",
                            "0",
                            "350",
                            "0"});
#line 30
 testRunner.Then("the reservations should be", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Close reservation", SourceLine=33)]
        public virtual void CloseReservation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Close reservation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Immatriculation",
                            "Login",
                            "StartDate",
                            "EndDate",
                            "EstimatedKilometers"});
                table7.AddRow(new string[] {
                            "01 BML 98",
                            "froullaud",
                            "13/03/2022",
                            "15/03/2022",
                            "100"});
#line 35
testRunner.Given("the reservations are", ((string)(null)), table7, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Immatriculation",
                            "Login",
                            "FinalKilometers"});
                table8.AddRow(new string[] {
                            "01 BML 98",
                            "froullaud",
                            "150"});
#line 38
 testRunner.When("close reservation", ((string)(null)), table8, "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Immatriculation",
                            "Login",
                            "StartDate",
                            "EndDate",
                            "EstimatedKilometers",
                            "FinalKilometers",
                            "EstimatedPrice",
                            "FinalPrice"});
                table9.AddRow(new string[] {
                            "01 BML 98",
                            "froullaud",
                            "13/03/2022",
                            "15/03/2022",
                            "100",
                            "150",
                            "350",
                            "450"});
#line 41
 testRunner.Then("the reservations should be", ((string)(null)), table9, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
