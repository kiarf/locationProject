// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowLocation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Login", SourceFile="Features\\Login.feature", SourceLine=0)]
    public partial class LoginFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Login.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Login", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "BirthDate",
                        "LicenceDate",
                        "LicenceNumber",
                        "Login",
                        "Password"});
            table10.AddRow(new string[] {
                        "Francois",
                        "Roullaud",
                        "16/10/1999",
                        "04/09/2019",
                        "20AF45091",
                        "froullaud",
                        "YXplcnR5"});
            table10.AddRow(new string[] {
                        "Johan",
                        "Campion",
                        "13/07/1997",
                        "02/11/2017",
                        "19BF25467",
                        "jcampion",
                        "YXplcnR5"});
            table10.AddRow(new string[] {
                        "Jean-Michel",
                        "Osef",
                        "14/02/1954",
                        "02/09/1972",
                        "21CF16547",
                        "jmosef",
                        "YXplcnR5"});
#line 5
testRunner.Given("the clients are", ((string)(null)), table10, "Given ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Login froullaud", SourceLine=10)]
        public virtual void LoginFroullaud()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Login froullaud", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Login",
                            "Password"});
                table11.AddRow(new string[] {
                            "froullaud",
                            "azerty"});
#line 12
 testRunner.When("login", ((string)(null)), table11, "When ");
#line hidden
#line 15
 testRunner.Then("the user froullaud should be connected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Create new Client", SourceLine=16)]
        public virtual void CreateNewClient()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new Client", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "LicenceDate",
                            "LicenceNumber",
                            "Login",
                            "Password"});
                table12.AddRow(new string[] {
                            "Philippe",
                            "Random",
                            "06/09/1999",
                            "01/08/2018",
                            "80AF41651",
                            "prandom",
                            "azerty"});
#line 18
 testRunner.When("create new client", ((string)(null)), table12, "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "BirthDate",
                            "LicenceDate",
                            "LicenceNumber",
                            "Login",
                            "Password"});
                table13.AddRow(new string[] {
                            "Francois",
                            "Roullaud",
                            "16/10/1999",
                            "04/09/2019",
                            "20AF45091",
                            "froullaud",
                            "YXplcnR5"});
                table13.AddRow(new string[] {
                            "Jean-Michel",
                            "Osef",
                            "14/02/1954",
                            "02/09/1972",
                            "21CF16547",
                            "jmosef",
                            "YXplcnR5"});
                table13.AddRow(new string[] {
                            "Johan",
                            "Campion",
                            "13/07/1997",
                            "02/11/2017",
                            "19BF25467",
                            "jcampion",
                            "YXplcnR5"});
                table13.AddRow(new string[] {
                            "Philippe",
                            "Random",
                            "06/09/1999",
                            "01/08/2018",
                            "80AF41651",
                            "prandom",
                            "YXplcnR5"});
#line 21
 testRunner.Then("the clients should be", ((string)(null)), table13, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
